DIRECTORY STRUCTURE (Important Files Only):
pennantia (root)
    app/
        layout.tsx
        page.tsx
        chat/
            page.tsx
        components/
            ChatInterface.tsx
            ui/
                alert.tsx
                button.tsx
        lib/
            utils.ts

IMPORTANT FILES & THEIR CONTENT:

--- app/layout.tsx ---
'use client';

import './globals.css'
import { ChakraProvider } from '@chakra-ui/react'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <ChakraProvider>
          {children}
        </ChakraProvider>
      </body>
    </html>
  )
}

--- app/page.tsx ---
'use client';

import { Metadata } from 'next'
import Link from 'next/link'
import { Button } from '@chakra-ui/react'
import { Phone } from 'lucide-react'

const Home = () => {
  return (
    <div className="flex min-h-screen flex-col items-center justify-center p-4 text-center">
      <h1 className="mb-4 text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl">
        You Are Not Alone
      </h1>
      
      <p className="mb-8 text-xl text-gray-600">
        We understand you're going through a tough time. Help is here.
        Please choose one of the options below to connect with someone who cares.
      </p>
      
      <div className="flex flex-col gap-4 sm:flex-row sm:justify-center">
        <Link href="/chat">
          <Button colorScheme="teal" size="lg">
            Start Chat Support
          </Button>
        </Link>
        
        <Button
          as="a"
          href="tel:+1-800-XXX-XXXX"
          colorScheme="blue"
          size="lg"
          leftIcon={<Phone />}
        >
          Call Now
        </Button>
      </div>
      
      <p className="mt-6 text-sm text-gray-500">
        All conversations are confidential and handled by trained professionals
      </p>
    </div>
  )
}

export default Home;

--- app/chat/page.tsx ---
'use client';

import React from 'react';
import { Box } from '@chakra-ui/react';
import ChatInterface from '../../components/ChatInterface';  // Updated import path

export default function ChatPage() {
  return (
    <Box className="container mx-auto p-4">
      <ChatInterface />
    </Box>
  );
}

--- app/components/ChatInterface.tsx ---
'use client';

import React, { useState } from 'react';
import { Box, Button, Input, VStack, HStack, Text, useToast } from '@chakra-ui/react';
import { Send, AlertTriangle } from 'lucide-react';

interface Message {
  text: string;
  sender: 'user' | 'system';
  timestamp: Date;
}

const ChatInterface = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [triageStatus, setTriageStatus] = useState<'emergency' | 'urgent' | 'regular' | null>(null);
  const toast = useToast();

  const classifyMessage = async (message: string) => {
    const keywords = {
      emergency: ['suicide', 'kill', 'die', 'hurt', 'emergency'],
      urgent: ['anxiety', 'panic', 'scared', 'urgent', 'help'],
    };

    const lowercaseMsg = message.toLowerCase();
    
    if (keywords.emergency.some(word => lowercaseMsg.includes(word))) {
      return 'emergency';
    } else if (keywords.urgent.some(word => lowercaseMsg.includes(word))) {
      return 'urgent';
    }
    return 'regular';
  };

  const handleSend = async () => {
    if (!input.trim()) return;

    const newMessage = {
      text: input,
      sender: 'user' as const,
      timestamp: new Date(),
    };
    setMessages(prev => [...prev, newMessage]);

    const classification = await classifyMessage(input);
    setTriageStatus(classification);

    switch (classification) {
      case 'emergency':
        toast({
          title: "Emergency Support Activated",
          description: "Connecting you with a crisis counselor immediately.",
          status: "error",
          duration: null,
          isClosable: false,
        });
        break;
      case 'urgent':
        toast({
          title: "Priority Support",
          description: "A counselor will be with you shortly.",
          status: "warning",
          duration: 5000,
        });
        break;
      default:
        toast({
          title: "Message Received",
          description: "We'll schedule a counseling session for you.",
          status: "info",
          duration: 5000,
        });
    }

    const systemResponse = {
      text: getSystemResponse(classification),
      sender: 'system' as const,
      timestamp: new Date(),
    };
    setMessages(prev => [...prev, systemResponse]);
    
    setInput('');
  };

  const getSystemResponse = (classification: 'emergency' | 'urgent' | 'regular') => {
    switch (classification) {
      case 'emergency':
        return "We're connecting you with a crisis counselor immediately. Please stay with us.";
      case 'urgent':
        return "We understand you need help soon. A counselor will be with you shortly.";
      default:
        return "Thank you for reaching out. We'll schedule a session with a counselor.";
    }
  };

  return (
    <Box maxW="2xl" mx="auto" h="600px" borderRadius="lg" boxShadow="lg" bg="white">
      {triageStatus === 'emergency' && (
        <Box bg="red.100" p={4} borderRadius="md" m={4}>
          <HStack>
            <AlertTriangle color="red" />
            <Box>
              <Text fontWeight="bold">Emergency Support Activated</Text>
              <Text fontSize="sm">Connecting you with a crisis counselor immediately.</Text>
            </Box>
          </HStack>
        </Box>
      )}
      
      <VStack h="full" spacing={0}>
        <Box flex={1} w="full" overflowY="auto" p={4}>
          {messages.map((msg, idx) => (
            <HStack key={idx} justify={msg.sender === 'user' ? 'flex-end' : 'flex-start'} mb={4}>
              <Box
                maxW="80%"
                bg={msg.sender === 'user' ? 'blue.500' : 'gray.100'}
                color={msg.sender === 'user' ? 'white' : 'black'}
                py={2}
                px={4}
                borderRadius="lg"
              >
                <Text>{msg.text}</Text>
              </Box>
            </HStack>
          ))}
        </Box>
        
        <HStack p={4} w="full" borderTopWidth={1}>
          <Input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSend()}
            placeholder="Type your message..."
            size="md"
          />
          <Button
            colorScheme="blue"
            onClick={handleSend}
            isDisabled={!input.trim()}
          >
            <Send size={20} />
          </Button>
        </HStack>
      </VStack>
    </Box>
  );
};

export default ChatInterface;

--- app/components/ui/alert.tsx ---
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

--- app/components/ui/button.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

--- app/lib/utils.ts ---
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
 
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

